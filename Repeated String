long repeatedString(string s, long n) {
    
    //map initialization for frequency count
    map<char ,int> m;
    for (int i=0 ;i<s.length();i++) {
        m[s[i]]++;
    }
    int max=0,ans;
    for (auto it : m) {
        if(it.second>max){
            ans=it.first;
            max=it.second;
        }
    }
    
    //vector initialization 
    vector<char> v;
    for(char c:s){
        v.push_back(c);
    }
    //if there is only one char in string s
    if (s.length()==1 && s[0]=='a') {
        return n;
    }
    //if string length is equal to n
    else if(s.length()==n){
        //calculate max char in string
        return max;
    }
    else if(s.length()>n){
        int count=0;
        for(char i=0;i<n;i++){
            if(s[i]=='a'){
                count++;
            }
        }
        return count;
    }
    
    //if string length is smaller to n
    else if(s.length()<n){
        long count = 0;
    for (char c : s) {
        if (c == 'a') {
            count++;
        }
    }
    long repetitions = n / s.length();
    count *= repetitions;
    long remaining = n % s.length();
    for (int i = 0; i < remaining; i++) {
        if (s[i] == 'a') {
            count++;
        }
    }
    return count;
        
    }
    
    return 0;
}
